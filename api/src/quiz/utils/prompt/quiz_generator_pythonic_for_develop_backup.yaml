_type: prompt
input_variables:
  ["topic","reference","quiz_content","quiz_type","set","number"]
template: |
  class QuizzesGenerator:
    """Your goal is to create a well crafted set of quizzes about the "topic" in the format of "quiz_content" and "quiz_type" with "reference".
    The purpose of the quiz is to assess learners' understanding of how to use "topic".
    Return the result as if the class `QuizzesGenerator` was executed to produce the quizzes.
    You only return the result.

    Parameters:
      topic (str): topic of quizzes to create
      reference (str): quizzes should be based on references
      quiz_content (list): list of possible content types for the quizzes
        vocabulary_focused: create quizzes focusing on individual words, their meanings, usage, and nuances
        sentence_example: create quizzes based using complete sentences to test grammar, context, and comprehension
        cultural_information:create quizzes incorporating cultural aspects related to the topic, testing cultural knowledge and understanding
        word_order:create quizzes specifically testing the correct order of words in sentences or phrases
      quiz_type (list): list of possible types for the quizzes
        multiple_choice:create multiple choice quizzes with 4 answer options(\nâ‘ , â‘¡, â‘¢, â‘£), where only on option is correct
        true_or_false:create true/false quizzes where the statement is either correct or incorrect
        fill_in_the_blank:create fill-in-the-blank quizzes where one key word or phrase is missing from the sentence
      number (int): number of quizzes to create

    Returns: 
      str: A formatted string containing sets of quizzes. The format includes sections for Quiz, Answer, Explain, Sentence, and Dialog, each prefixed with a rocket emoji (ðŸš€).Individual quizzes within each section are numbered and prefixed with a sparkle emoji (ðŸ”†).
    """
    #define parameter
    def __init__(self, topic, reference, quiz_content, quiz_type, number, set):
      self.topic = topic
      self.reference = reference
      self.quiz_content = quiz_content
      self.quiz_type = quiz_type
      self.number = number
      self.set = set

    #make quiz function
    def create_quizzes(self):
      quizzes = []
      for content, type in self.set:
          quiz:
            'type': [content, type],
            'quiz': create_quiz_with_llm(Create a quiz about the topic self.topic, with reference to self.reference, focusing on content, and formatted as type),
            'answer': create_answer_with_llm(Provide the correct answer based on self.topic and self.reference for the quiz created),
            'explain': create_explain_with_llm(Explain why the answer is correct using details from self.reference and the topic self.topic),
            'sentence': create_sentence_with_llm(Provide three sample sentences related to the topic self.topic focusing on content),
            'dialog': create_dialog_with_llm(Create a short dialog that illustrates the correct usage of self.topic in the context of content)      
          quizzes.append(quiz)
      return quizzes

    #make quiz format function
    def generate_quizzes(self):
      quiz="ðŸš€ Quiz" + "\n\n"
      answer="ðŸš€ Answer" + "\n\n"
      explain="ðŸš€ Explain" + "\n\n"
      sentence="ðŸš€ Sentence" + "\n\n"
      dialog="ðŸš€ Dialog" + "\n\n"

      quizzes_set = self.create_quizzes()

      for idx, quiz_set in enumerate(quizzes_set):
        quiz += "ðŸ”† Quiz idx+1. " + quiz_set['quiz'] + "\n\n"
        answer += "ðŸ”† Quiz idx+1. " + quiz_set['answer'] + "\n\n"
        explain += "ðŸ”† Quiz idx+1. " + quiz_set['explain'] + "\n\n"
        sentence += "ðŸ”† Quiz idx+1. " + "\n\n" + quiz_set['sentence'] + "\n\n"
        dialog += "ðŸ”† Quiz idx+1. " + quiz_set['dialog'] + "\n\n"

      quiz_set = "+quiz + "\n"+answer + "\n"+explain + "\n"+sentence + "\n"+dialog
      return quiz_set

  Quizzes_Generator = QuizzesGenerator({topic}, {reference}, {quiz_content}, {quiz_type},{number},{set})
  result = Quizzes_Generator.generate_quizzes()
